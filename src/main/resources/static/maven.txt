Maven 中的有两大核心：
    依赖管理：对 jar 的统一管理(Maven 提供了一个 Maven 的中央仓库，https://mvnrepository.com/，当我们在项目中添加完依赖之后，
        Maven 会自动去中央仓库下载相关的依赖，并且解决依赖的依赖问题)
    项目构建：对项目进行编译、测试、打包、部署、上传到私服等

Maven 安装
    下载 Maven -->解压并配置 -->配置，只需要配置环境变量即可
    1,首先配置 MAVEN_HOME
    2,配置环境变量 Path
    3,检验安装 mvn -v

Maven 配置
    本地仓库配置，默认位置在 当前用户名\.m2\repository，可以在 conf/settings.xml 中自定义本地仓库位置 <localRepository>路径</localRepository>
    远程镜像配置，由于默认的中央仓库下载较慢，因此，也可以将远程仓库地址改为阿里巴巴的仓库地址：
    <mirror>
            <id>nexus-aliyun</id>
            <mirrorOf>central</mirrorOf>
            <name>Nexus aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
    </mirror>
    这段配置，加在 settings.xml 中的 mirrors 节点中

Maven 常用命令
    Maven 中有一些常见的命令，如果使用 Eclipse 需要手动敲命令，如果使用 IDEA 的话，可以不用命令，直接点点点就可以了。

    mvn clean	清理	这个命令可以用来清理已经编译好的文件
    mvn compile	编译	将 Java 代码编译成 Class 文件
    mvn test	测试	项目测试
    mvn package	打包	根据用户的配置，将项目打成 jar 包或者 war 包
    mvn install	安装	手动向本地仓库安装一个 jar
    mvn deploy	上传	将 jar 上传到私服

    这里需要注意的是，这些命令都不是独立运行的，它有一个顺序
    我想将 jar 上传到私服，那么就要构建 jar，就需要执行 package 命令，要打包，当然也需要测试，那就要走 mvn test 命令，
    要测试就要先编译…..，因此，最终所有的命令都会执行一遍。不过，开发者也可以手动配置不执行某一个命令，这就是跳过。
    一般来是，除了测试，其他步骤都不建议跳过

IDEA 中使用 Maven
    IDEA 中，Maven 的配置在 File->Settings->Build,Execution,Deployment->Build Tools->Maven
    JavaSE 工程创建
        勾选上 Create from archetype ，则表示可以根据一个项目骨架（项目模板）来创建一个新的工程，不过，如果只是创建 JavaSE 项目，
        则不用选择项目骨架。直接 Next 即可。然后填入项目的坐标，即 groupId 和 artifactId。
    JavaWeb 工程创建
        在 IDEA 中，创建 Maven Web 项目，有两种思路：
            首先创建一个 JavaSE 项目，然后手动将 JavaSE 项目改造成一个 JavaWeb 项目
            创建项目时选择项目骨架，骨架就选择 webapp
        改造 JavaSE 项目
            项目创建完成后，首先修改 pom.xml ，配置项目的打包格式为 war 包。 这样，IDEA 就知道当前项目是一个 Web 项目
            然后，选中 JavaSE 工程，右键单击，选择 Open Module Settings，或者直接按 F4，然后选择 Web
            接下来，在 webapp 目录中，添加 web.xml 文件,注意，一定要修改 web.xml 文件位置
        项目创建完成后，接下来就是部署了。
            部署，首先点击 IDEA 右上角的 Edit Configurations,然后，配置 Tomcat,接下来选择 Deployment 选项卡，配置要发布的项目
    通过 webapp 骨架直接创建
        这种方式比较简单，基本上不需要额外的配置，项目创建完成后，就是一个 web 项目。只需要我们在创建项目时，选择 webapp 骨架即可
    项目创建成功后，只有 webapp 目录，这个时候，自己手动创建 java 和 resources 目录，创建完成后，右键单击，
    选择 Mark Directory As，将 java 目录标记为 sources root，将 resources 目录标记为 resources root 即可
    凡是在 IDEA 右下角看到了 Enable Auto Import 按钮，一定点一下

Maven 依赖管理
    Maven 坐标
        dependencies
        在 dependencies 标签中，添加项目需要的 jar 所对应的 maven 坐标。
        dependency
        一个 dependency 标签表示一个坐标
        groupId
        团体、公司、组织机构等等的唯一标识。团体标识的约定是它以创建这个项目的组织名称的逆向域名（例如 org.javaboy）开头。
        一个 Maven 坐标必须要包含 groupId。一些典型的 groupId 如 apache 的 groupId 是 org.apache.
        artifactId
        artifactId 相当于在一个组织中项目的唯一标识符。
        version
        一个项目的版本。一个项目的话，可能会有多个版本。如果是正在开发的项目，我们可以给版本号加上一个 SNAPSHOT，表示这是一个快照版（新建项目的默认版本号就是快照版）
        scope
        表示依赖范围

        我们添加了很多依赖，但是不同依赖的使用范围是不一样的。最典型的有两个，一个是数据库驱动，另一个是单元测试。
        数据库驱动，在使用的过程中，我们自己写代码，写的是 JDBC 代码，只有在项目运行时，才需要执行 MySQL 驱动中的代码。
        所以，MySQL 驱动这个依赖在添加到项目中之后，可以设置它的 scope 为 runtime，编译的时候不生效。
        单元测试，只在测试的时候生效，所以可以设置它的 scope 为 test，这样，当项目打包发布时，单元测试的依赖就不会跟着发布
    冲突解决
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.1.9.RELEASE</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        这个表示从 spring-context 中排除 spring-core 依赖

聚合工程
    所谓的聚合工程，实际上也就是多模块项目。在一个比较大的互联网项目中，项目需要拆分成多个模块进行开发，比如订单模块、VIP 模块、支付模块、
    内容管理模块、CMS、CRM 等等。这种拆分方式，实际上更接近于微服务的思想。在一个模块中，还可以继续进行拆分，
    例如分成 dao、service、controller 等

    IDEA 中创建聚合工程
        1，创建一个空的 Maven 项目，项目创建完成后，由于 parent 并不参与业务的实现，只是用来管理它的子模块，因此，src 目录可以将其删除
        2.选中当前工程，右键单击，New->Module，然后继续选择创建一个 Maven 项目
            在 IDEA 中，已经默认指明了当前 Module 的 parent，开发者只需要填入当前 Module 的 artifactId 即可
        3，javaboy-manager 创建完成后，此时，观察 javaboy-parent 的 pom.xml 文件，发现它自动加上了 packing 属性
          其中，它的 packaging 属性值为 pom，这表示它是一个聚合工程，同时，他还多了 modules 节点，指明了它自己的子模块。
          同时，注意 javaboy-manager ，它自身多了一个 parent 节点，这个 parent 节点描述了它的父模块的属性值
          由于 javaboy-manager 本身也是一个聚合工程，因此，javaboy-manager 的 src 目录也可以删除
        4，选中 javaboy-manager，右键单击，New->Module 创建一个新的 Maven 模块出来。这个步骤类似于第二步，不在赘述。
        这里，新的 javaboy-manager-model 创建成功后，我们手动配置它的 packaging 属性值为 jar
        5，依照第 4 步，再分别创建 javaboy-manager-service 以及 javaboy-manager-dao
        6，继续创建 javaboy-manager-web 模块，不同于其他模块，web 模块需要打包成 war
        7，web 工程创建完成后，完善模块之间的继承关系
        javaboy-manager-web 依赖 javaboy-manager-service javaboy-manager-service
        依赖 javaboy-manager-dao javaboy-manager-dao 依赖 javaboy-manager-model

        有一个需要注意的地方，在多模块项目中，web 项目打包需要注意以下问题：
        不可以直接单独打包
        如果要打包，有两种方式：
        第一种就是先手动挨个将 model、dao、service 安装到本地仓库
        从聚合工程处打包，即从 web 的parent 处打包。
    模块划分：
        可以是父子形式：父工程是一个目录，子工程的目录在父工程目录中
        可以是平铺的形式：即父子工程在同一目录下

        一般来说，dao、service 都是打包成 jar、web 打包成 war，parent 的 packaging 类型则是一个 pom

    配置细节：
        子模块中需要配置 parent，这样 vhr-service 就继承了 parent 的一切，包括依赖、插件、坐标、版本号等等，
        有了来自 parent 的一大堆东西之后，vhr-service 自己的 pom.xml 中只需要简单配置一下 artifactId 即可。
        依赖的版本号则可以通过 ${project.version} 变量引用项目的版本号。
        这里没有配置 packaging，默认就是 jar，所以可以省略，如果是 web 模块，则还需要配置 packaging 为 war

    打包：
        直接在 parent 处执行 mvn package 命令
        如果你使用的是 IntelliJ IDEA，也可以在工具右侧找到 Maven->LifeCycle->Package，双击进行打包

    目录问题：
        在实际应用中，有的时候我们可能会采用平铺的形式
        parent 和各个子模块处于同一目录下，这个时候，无论是 parent 的 pom.xml 还是子模块的 pom.xml，写法都会和之前略有差异
        ...
        <modules>
            <module>../vhr-dao</module>
            <module>../vhr-service</module>
            <module>../vhr-web</module>
        </modules>
        ...
        由于 module 中定义的是子模块名称，所以，当子模块和父模块处于同一目录下时，需要明确指出子模块的位置，
        因此这里用到了相对路径

        同理，在子模块中也需要明确指定父模块的 pom.xml
        ...
        <relativePath>../parent/pom.xml</relativePath>
        ...
        在 parnet 节点中多了 relativePath 用来指定父模块的 pom.xml